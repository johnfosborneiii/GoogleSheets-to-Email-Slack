function onOpen() {
  const ui = SpreadsheetApp.getUi();
  clearDraft();
  ui.createMenu('Email Options')
      .addItem('Generate Email', 'generateEmailDraft')
      .addToUi();
}

/**
 * Generates email template emails from sheet data
 * @param {Sheet} sheet to read data from
*/
function generateEmailDraft() {
  
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var subject = SpreadsheetApp.getActiveSpreadsheet().getName();
  var spreadsheetUrl = SpreadsheetApp.getActiveSpreadsheet().getUrl();
  var numRows = sheet.getLastRow() - 2; // Ignore the last two rows
  var recipients = sheet.getRange(2, 1, numRows - 1).getValues(); // Get recipients from Column A

  // Start composing the email HTML
  var emailText = "<html><body>";
  // Same thing but without buttons
  var emailContent = "<html><body>";
  var emailOpening = "<p>This email was auto-generated by automation in <a href='" + spreadsheetUrl + "' target='_blank'>this spreadsheet</a>.</p>";
  emailText += emailOpening;
  emailContent += emailOpening;
  
  // Add recipients to the email preview
  var recipientList = [];
  recipients.forEach(function(row) {
    var email = row[0];
    if (email) {
      recipientList.push(email);
    }
  });

  // Start the table for the email content
  var tableHTML = "<table border='1' style='width:auto; border-collapse: collapse;'>";

  // Adding headers
  tableHTML += "<tr>";
  var headers = sheet.getRange(1, 2, 1, 3).getValues()[0];
  headers.forEach(function(header) {
    tableHTML += "<th style='padding: 4px; white-space: nowrap;'>" + header + "</th>";
  });
  tableHTML += "</tr>";

  // Loop through each row, excluding the last two and the header row, for table content
  for (var i = 2; i <= numRows; i++) {
    var rowValueB = sheet.getRange(i, 2).getValue(); // Value in Column B
    
    if (rowValueB !== "") { // Check if Column B is non-empty
      var rowData = sheet.getRange(i, 2, 1, 3).getValues()[0];
      tableHTML += "<tr>";
      rowData.forEach(function(cell) {
        cell = String(cell);
        if (cell.startsWith('http://') || cell.startsWith('https://')) {
          // Convert URL text to clickable link
          tableHTML += "<td style='padding: 4px; white-space: nowrap;'><a href='" + cell + "' target='_blank'>" + cell + "</a></td>";
        } else {
          tableHTML += "<td style='padding: 4px; white-space: nowrap;'>" + cell + "</td>";
        }
      });
      tableHTML += "</tr>";
    }
  }

  // Close the table
  tableHTML += "</table>";
  emailText += tableHTML;
  emailContent += tableHTML;
  
  var emailClosing = "<p>Sincerely,<br><br>Your Friendly Neighborhood Sales Engineering Team</p>";
  emailClosing += "<p>Note: Automation is WIP with goal of aligning with CS Checklist <a href='https://github.com/chainguard-dev/customer-issues/issues/662' target='_blank'>here</a>.</p>";
  emailText += emailClosing;
  emailContent += emailClosing;

  // Add buttons
  emailText += "<br><button onclick='sendAndClose()'>Send</button>&nbsp;&nbsp;";
  emailText += "<button onclick='copyForSlack()'>Copy for Slack</button>&nbsp;&nbsp;"; 
  emailText += "<button onclick='google.script.host.close()'>Keep Working</button>";
  emailText += "<script>";
  emailText += "function sendAndClose() {";
  emailText += "  google.script.run.withSuccessHandler(function() {";
  emailText += "    google.script.host.close();";
  emailText += "  }).sendEmail();";
  emailText += "}";
  emailText += "function copyForSlack() {";
  emailText += "  var table = document.querySelector('table');";
  emailText += "  var formattedText = 'Subject: GitLab Implementation Kickoff';";
  emailText += "  formattedText += '\\`\\`\\`\\n';";
  emailText += "  for (var i = 0, row; row = table.rows[i]; i++) {";
  emailText += "    for (var j = 0, col; col = row.cells[j]; j++) {";
  emailText += "      var cellText = col.innerText.trim();";
  emailText += "      var paddingLength = [64, 32, 128][j];";
  emailText += "      var paddedText = cellText.padEnd(paddingLength, ' ');";
  emailText += "      formattedText += paddedText;";
  emailText += "      if (j < row.cells.length - 1) formattedText += '|';"; // Add column separator except for the last column
  emailText += "    }";
  emailText += "    formattedText += '\\n';"; // New line at the end of each row
  emailText += "  }";
  emailText += "  formattedText += '\\`\\`\\`';";
  emailText += "  var el = document.createElement('textarea');";
  emailText += "  document.body.appendChild(el);";
  emailText += "  el.value = formattedText;";
  emailText += "  el.select();";
  emailText += "  document.execCommand('copy');";
  emailText += "  document.body.removeChild(el);";
  emailText += "}";
  emailText += "</script>";

  // Close HTML tags
  emailText += "</body></html>";
  emailContent += "</body></html>";

  var scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperty('emailContent', emailContent);

  // Display the HTML email in a modal dialog
  var htmlOutput = HtmlService.createHtmlOutput(emailText)
                     .setWidth(1000)
                     .setHeight(600)
                     .setSandboxMode(HtmlService.SandboxMode.IFRAME);
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, subject);

}

function clearDraft() {
  var scriptProperties = PropertiesService.getScriptProperties();
  scriptProperties.setProperty('emailContent', "");
}

function sendEmail() {
  var scriptProperties = PropertiesService.getScriptProperties();
  var emailBody = scriptProperties.getProperty('emailContent'); // Get the saved email content

  // Email sending logic
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var subject = SpreadsheetApp.getActiveSpreadsheet().getName();
  var recipients = sheet.getRange(2, 1, sheet.getLastRow() - 2, 1).getValues(); // Get recipients from Column A

  // Send email to each recipient
  recipients.forEach(function(row) {
    var email = row[0];
    if (email) {
      // Use the {htmlBody: emailBody} parameter to send the email as HTML content
      MailApp.sendEmail(email, subject, "", {htmlBody: emailBody});
    }
  });
  // Update column B in the very last row with the current timestamp
  var totalRows = sheet.getMaxRows();
  var timestamp = new Date(); // Current date and time
  sheet.getRange(totalRows, 2).setValue(timestamp); // Set the timestamp in column B of the last row
}
